// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package serverstreaming_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CalculatorClient is the client API for Calculator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculatorClient interface {
	Fibonacci(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (Calculator_FibonacciClient, error)
}

type calculatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculatorClient(cc grpc.ClientConnInterface) CalculatorClient {
	return &calculatorClient{cc}
}

func (c *calculatorClient) Fibonacci(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (Calculator_FibonacciClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calculator_serviceDesc.Streams[0], "/ua.made.serverstreaming.Calculator/Fibonacci", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculatorFibonacciClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Calculator_FibonacciClient interface {
	Recv() (*wrapperspb.UInt64Value, error)
	grpc.ClientStream
}

type calculatorFibonacciClient struct {
	grpc.ClientStream
}

func (x *calculatorFibonacciClient) Recv() (*wrapperspb.UInt64Value, error) {
	m := new(wrapperspb.UInt64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculatorServer is the server API for Calculator service.
// All implementations must embed UnimplementedCalculatorServer
// for forward compatibility
type CalculatorServer interface {
	Fibonacci(*wrapperspb.UInt64Value, Calculator_FibonacciServer) error
	mustEmbedUnimplementedCalculatorServer()
}

// UnimplementedCalculatorServer must be embedded to have forward compatible implementations.
type UnimplementedCalculatorServer struct {
}

func (UnimplementedCalculatorServer) Fibonacci(*wrapperspb.UInt64Value, Calculator_FibonacciServer) error {
	return status.Errorf(codes.Unimplemented, "method Fibonacci not implemented")
}
func (UnimplementedCalculatorServer) mustEmbedUnimplementedCalculatorServer() {}

// UnsafeCalculatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculatorServer will
// result in compilation errors.
type UnsafeCalculatorServer interface {
	mustEmbedUnimplementedCalculatorServer()
}

func RegisterCalculatorServer(s grpc.ServiceRegistrar, srv CalculatorServer) {
	s.RegisterService(&_Calculator_serviceDesc, srv)
}

func _Calculator_Fibonacci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.UInt64Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculatorServer).Fibonacci(m, &calculatorFibonacciServer{stream})
}

type Calculator_FibonacciServer interface {
	Send(*wrapperspb.UInt64Value) error
	grpc.ServerStream
}

type calculatorFibonacciServer struct {
	grpc.ServerStream
}

func (x *calculatorFibonacciServer) Send(m *wrapperspb.UInt64Value) error {
	return x.ServerStream.SendMsg(m)
}

var _Calculator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ua.made.serverstreaming.Calculator",
	HandlerType: (*CalculatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fibonacci",
			Handler:       _Calculator_Fibonacci_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server-streaming/proto/serverstream.proto",
}
