#!/usr/bin/env python3

import hashlib
import os
import pathlib
import re


def main():
    print("\033[H\033[J", end="")

    files = [file for file in allowed_files()]
    files.sort(key=lambda s: len(s.split("/")))

    menu = []

    config = ""
    with open("./base.config.yaml", "r", encoding="utf-8") as f:
        config = f.read()

    config += "\n"
    config += "menu:\n"
    config += "  main:\n"

    for file in files:
        with open(file, "r", encoding="utf-8", errors="ignore") as f:
            data = f.read(512)
            name = re.search(r"^# (.*)$", data, re.MULTILINE)
            name = file if not name else name.group(1)

        url = file.replace("_index.md", "").replace("index.md", "").replace(".md", "").rstrip("/")

        if "`" in name:
            config += f'  - name: "{name}"\n'
            config += f'    title: "{name}"\n'
        else:
            config += f"  - name: {name}\n"
            config += f"    title: {name}\n"
        config += f"    url: /{url}\n"
        config += f"    pageRef: /{url}\n"
        config += f"    identifier: /{url}\n"
        parent = os.path.dirname(url)
        if "/" in url:
            config += f"    parent: /{parent}\n"
        config += "\n"

    digest = hashlib.sha1(config.encode("utf-8")).hexdigest()

    cfg_path = pathlib.Path("config.yaml")

    if not cfg_path.exists():
        with open("config.yaml", "w") as f:
            print("Updating Config")
            f.write(config)
        return

    sha1f = hashlib.sha1()
    with cfg_path.open("rb") as fh:
        for chunk in iter(lambda: fh.read(8192), b""):
            sha1f.update(chunk)

    if sha1f.hexdigest() != digest:
        with open("config.yaml", "w") as f:
            print("Updating Config")
            f.write(config)


def allowed_files():
    # pathlib-based implementationignore_file = os.path.join(".", ".hugoignore")

    patterns = get_disallow_patterns()
    for path in pathlib.Path(".").rglob("*.md"):
        if not any(rx.search(str(path)) for rx in patterns):
            yield str(path)


def get_disallow_patterns():
    patterns = []
    ignore_file = pathlib.Path(".") / ".hugoignore"
    if not ignore_file.exists():
        return patterns

    with ignore_file.open("r", encoding="utf-8", errors="ignore") as f:
        for line in f:
            pat = line.rstrip("\n")
            if not pat:
                continue

            try:
                patterns.append(re.compile(pat))
            except re.error:
                patterns.append(re.compile(re.escape(pat)))
    return patterns


if __name__ == "__main__":
    main()
